"""
P√°gina Profissional para Adicionar Equipamentos - Vers√£o 3.0
Tecnologias: Streamlit 1.42+ | Modal Dialogs | Session State | Data Editor | Tabs | Fragments
"""

import streamlit as st
import pandas as pd
from typing import Optional, Dict, Any, List
from loguru import logger
from pydantic import ValidationError
from datetime import datetime
import io

from services.estoque_service import EstoqueService
from models.schemas import Equipamento
from config.settings import settings
from utils.ui_utils import (
    create_form_section, show_success_message, show_error_message, 
    show_warning_message, show_toast, create_action_buttons,
    create_info_cards, normalizar_status_equipamento, render_status_badge
)

class AdicionarEquipamentoProfessional:
    """P√°gina Profissional para Adicionar Equipamentos com Tecnologias de Ponta"""
    
    def __init__(self, estoque_service: EstoqueService):
        self.estoque_service = estoque_service
        self._init_session_state()
    
    def _init_session_state(self) -> None:
        """Inicializa session state com configura√ß√µes avan√ßadas"""
        if 'adicionar_config' not in st.session_state:
            st.session_state.adicionar_config = {
                'auto_code_generation': True,
                'batch_mode_enabled': True,
                'validation_strict': True,
                'notification_enabled': True,
                'cache_ttl': 300  # 5 minutos
            }
        
        if 'adicionar_stats' not in st.session_state:
            st.session_state.adicionar_stats = {
                'total_added_today': 0,
                'total_value_added_today': 0.0,
                'last_operation': None
            }
    
    def render(self) -> None:
        """Renderiza a p√°gina moderna e profissional"""
        # Header profissional
        create_form_section(
            "üì¶ Adicionar Equipamentos - Sistema Profissional v3.0",
            "Interface moderna com opera√ß√µes individuais, em lote e configura√ß√µes avan√ßadas"
        )
        
        # Verificar cache e dados
        equipamentos_cache = self._get_equipamentos_cache_ttl()
        
        # Layout com tabs profissionais
        tab_individual, tab_lote, tab_historico, tab_analytics, tab_config = st.tabs([
            "‚ûï Adi√ß√£o Individual", 
            "üì¶ Adi√ß√£o em Lote", 
            "üìã Hist√≥rico",
            "üìä Analytics",
            "‚öôÔ∏è Configura√ß√µes"
        ])
        
        with tab_individual:
            self._render_adicao_individual(equipamentos_cache)
        
        with tab_lote:
            self._render_adicao_lote()
            
        with tab_historico:
            self._render_historico_adicoes()
            
        with tab_analytics:
            self._render_analytics_dashboard()
            
        with tab_config:
            self._render_configuracoes_avancadas()
    
    @st.cache_data(ttl=300, show_spinner=False)  # Cache com TTL de 5 minutos
    def _get_equipamentos_cache_ttl(_self) -> Dict[str, Dict]:
        """Cache inteligente com TTL autom√°tico"""
        try:
            logger.info("üîÑ Carregando cache TTL de equipamentos...")
            df_estoque = _self.estoque_service.obter_equipamentos()
            
            cache_equipamentos = {}
            for _, row in df_estoque.iterrows():
                codigo = str(row.get('codigo_produto', '')).strip().upper()
                if codigo:
                    cache_equipamentos[codigo] = {
                        'id': row.get('id'),
                        'equipamento': row.get('equipamento', ''),
                        'categoria': row.get('categoria', ''),
                        'marca': row.get('marca', ''),
                        'modelo': row.get('modelo', ''),
                        'quantidade': row.get('quantidade', 0),
                        'valor_unitario': row.get('valor_unitario', 0.0),
                        'fornecedor': row.get('fornecedor', ''),
                        'status': normalizar_status_equipamento(row.get('status', 'Dispon√≠vel'))
                    }
            
            logger.info(f"‚úÖ Cache TTL carregado: {len(cache_equipamentos)} equipamentos")
            return cache_equipamentos
            
        except Exception as e:
            logger.error(f"‚ùå Erro no cache TTL: {str(e)}")
            return {}
    
    def _render_adicao_individual(self, equipamentos_cache: Dict) -> None:
        """Renderiza interface moderna para adi√ß√£o individual"""
        
        # Estat√≠sticas em tempo real
        self._render_stats_realtime()
        
        st.markdown("### üéØ Busca Inteligente e Adi√ß√£o")
        
        # Sistema de busca avan√ßado
        col_busca1, col_busca2, col_busca3, col_busca4 = st.columns([3, 1, 1, 1])
        
        with col_busca1:
            codigo_input = st.text_input(
                "üîç C√≥digo Produto (AI Search)",
                placeholder="Ex: NB-DELL-001 | Digite para autocompletar...",
                help="Sistema de busca inteligente com sugest√µes autom√°ticas",
                key="codigo_search_modern"
            ).strip().upper()
        
        with col_busca2:
            if st.button("üîÑ Refresh Cache", use_container_width=True):
                self._invalidate_cache()
                st.rerun()
        
        with col_busca3:
            if st.button("üßπ Clear All", use_container_width=True):
                self._clear_form_state()
                st.rerun()
        
        with col_busca4:
            if st.button("üìä Quick Add", use_container_width=True):
                self._show_quick_add_dialog()
        
        # Sistema de autocompletar avan√ßado
        produto_encontrado = self._processar_busca_inteligente(codigo_input, equipamentos_cache)
        
        # Formul√°rio moderno com valida√ß√£o em tempo real
        self._render_formulario_moderno(produto_encontrado, codigo_input)
    
    def _render_adicao_lote(self) -> None:
        """Renderiza interface para adi√ß√£o em lote usando data_editor"""
        st.markdown("### üì¶ Adi√ß√£o em Lote - Data Editor Profissional")
        
        if not st.session_state.adicionar_config['batch_mode_enabled']:
            st.warning("‚ö†Ô∏è Modo lote desabilitado nas configura√ß√µes")
            return
        
        # Templates de lote
        col_template1, col_template2, col_template3 = st.columns(3)
        
        with col_template1:
            if st.button("üìã Template B√°sico", use_container_width=True):
                self._carregar_template_basico()
        
        with col_template2:
            if st.button("üíª Template Notebooks", use_container_width=True):
                self._carregar_template_notebooks()
        
        with col_template3:
            if st.button("üñ®Ô∏è Template Perif√©ricos", use_container_width=True):
                self._carregar_template_perifericos()
        
        # Data Editor para entrada em lote
        self._render_data_editor_lote()
    
    def _render_data_editor_lote(self) -> None:
        """Renderiza data editor profissional para lote"""
        
        # Inicializar DataFrame se n√£o existir
        if 'df_lote_adicionar' not in st.session_state:
            st.session_state.df_lote_adicionar = pd.DataFrame({
                'equipamento': [''] * 5,
                'categoria': [''] * 5,
                'marca': [''] * 5,
                'modelo': [''] * 5,
                'codigo_produto': [''] * 5,
                'quantidade': [1] * 5,
                'valor_unitario': [100.0] * 5,
                'fornecedor': [''] * 5,
                'observacoes': [''] * 5
            })
        
        st.markdown("#### üìù Editor de Dados - Adi√ß√£o em Lote")
        
        # Data Editor com configura√ß√£o avan√ßada
        df_editado = st.data_editor(
            st.session_state.df_lote_adicionar,
            column_config={
                "equipamento": st.column_config.TextColumn(
                    "üñ•Ô∏è Equipamento",
                    help="Nome do equipamento",
                    max_chars=100,
                    required=True
                ),
                "categoria": st.column_config.SelectboxColumn(
                    "üìÇ Categoria",
                    help="Categoria do equipamento",
                    options=settings.CATEGORIAS,
                    required=True
                ),
                "marca": st.column_config.TextColumn(
                    "üè¢ Marca",
                    help="Marca do fabricante",
                    max_chars=50,
                    required=True
                ),
                "modelo": st.column_config.TextColumn(
                    "üîß Modelo",
                    help="Modelo espec√≠fico",
                    max_chars=50,
                    required=True
                ),
                "codigo_produto": st.column_config.TextColumn(
                    "üè∑Ô∏è C√≥digo",
                    help="C√≥digo √∫nico do produto",
                    max_chars=20,
                    required=True
                ),
                "quantidade": st.column_config.NumberColumn(
                    "üìä Qtd",
                    help="Quantidade",
                    min_value=1,
                    max_value=settings.MAX_QUANTIDADE,
                    step=1,
                    format="%d"
                ),
                "valor_unitario": st.column_config.NumberColumn(
                    "üí∞ Valor Unit.",
                    help="Valor unit√°rio",
                    min_value=settings.MIN_VALOR,
                    step=0.01,
                    format="R$ %.2f"
                ),
                "fornecedor": st.column_config.TextColumn(
                    "üè™ Fornecedor",
                    help="Nome do fornecedor",
                    max_chars=100,
                    required=True
                ),
                "observacoes": st.column_config.TextColumn(
                    "üìù Obs",
                    help="Observa√ß√µes adicionais",
                    max_chars=200
                )
            },
            num_rows="dynamic",
            use_container_width=True,
            key="editor_lote_adicionar"
        )
        
        # Atualizar session state
        st.session_state.df_lote_adicionar = df_editado
        
        # Valida√ß√£o e processamento do lote
        self._processar_validacao_lote(df_editado)
    
    def _render_historico_adicoes(self) -> None:
        """Renderiza hist√≥rico profissional de adi√ß√µes"""
        st.markdown("### üìã Hist√≥rico de Adi√ß√µes")
        
        # Filtros modernos
        col_filtro1, col_filtro2, col_filtro3, col_filtro4 = st.columns(4)
        
        with col_filtro1:
            periodo = st.selectbox(
                "üìÖ Per√≠odo",
                ["Hoje", "7 dias", "30 dias", "Personalizado"],
                key="filtro_periodo_hist"
            )
        
        with col_filtro2:
            categoria_filtro = st.selectbox(
                "üìÇ Categoria",
                ["Todas"] + settings.CATEGORIAS,
                key="filtro_categoria_hist"
            )
        
        with col_filtro3:
            valor_min = st.number_input(
                "üí∞ Valor M√≠n.",
                min_value=0.0,
                value=0.0,
                key="filtro_valor_min"
            )
        
        with col_filtro4:
            if st.button("üì• Exportar", use_container_width=True):
                self._exportar_historico()
        
        # Simular dados de hist√≥rico (integrar com banco real)
        self._render_historico_mock()
    
    def _render_analytics_dashboard(self) -> None:
        """Renderiza dashboard de analytics"""
        st.markdown("### üìä Analytics Dashboard - Adi√ß√µes")
        
        # M√©tricas em tempo real
        col_metric1, col_metric2, col_metric3, col_metric4 = st.columns(4)
        
        with col_metric1:
            st.metric(
                "üì¶ Adi√ß√µes Hoje", 
                st.session_state.adicionar_stats['total_added_today'],
                delta="+2 vs ontem"
            )
        
        with col_metric2:
            st.metric(
                "üí∞ Valor Hoje", 
                f"R$ {st.session_state.adicionar_stats['total_value_added_today']:,.2f}",
                delta="+15% vs ontem"
            )
        
        with col_metric3:
            st.metric(
                "‚ö° Taxa Sucesso", 
                "98.5%",
                delta="+1.2%"
            )
        
        with col_metric4:
            st.metric(
                "üéØ Autocompletar", 
                "85%",
                delta="+5%"
            )
        
        # Gr√°ficos modernos (simular dados)
        self._render_graficos_analytics()
    
    def _render_configuracoes_avancadas(self) -> None:
        """Renderiza configura√ß√µes avan√ßadas da p√°gina"""
        st.markdown("### ‚öôÔ∏è Configura√ß√µes Avan√ßadas")
        
        # Configura√ß√µes de comportamento
        st.markdown("#### üéõÔ∏è Comportamento do Sistema")
        
        col_config1, col_config2 = st.columns(2)
        
        with col_config1:
            auto_code = st.checkbox(
                "Gera√ß√£o autom√°tica de c√≥digos",
                value=st.session_state.adicionar_config['auto_code_generation'],
                help="Gerar c√≥digos automaticamente baseado em categoria e marca"
            )
            
            validation_strict = st.checkbox(
                "Valida√ß√£o rigorosa",
                value=st.session_state.adicionar_config['validation_strict'],
                help="Valida√ß√µes mais rigorosas nos formul√°rios"
            )
            
            notifications = st.checkbox(
                "Notifica√ß√µes habilitadas",
                value=st.session_state.adicionar_config['notification_enabled'],
                help="Mostrar toast notifications"
            )
        
        with col_config2:
            batch_mode = st.checkbox(
                "Modo lote habilitado",
                value=st.session_state.adicionar_config['batch_mode_enabled'],
                help="Permitir adi√ß√µes em lote"
            )
            
            cache_ttl = st.selectbox(
                "TTL do Cache (segundos)",
                [60, 300, 600, 1800],
                index=1,
                help="Tempo de vida do cache"
            )
        
        # Atualizar configura√ß√µes
        if st.button("üíæ Salvar Configura√ß√µes", type="primary"):
            st.session_state.adicionar_config.update({
                'auto_code_generation': auto_code,
                'validation_strict': validation_strict,
                'notification_enabled': notifications,
                'batch_mode_enabled': batch_mode,
                'cache_ttl': cache_ttl
            })
            show_toast("‚úÖ Configura√ß√µes salvas!", "üéâ")
            st.rerun()
        
        # Configura√ß√µes avan√ßadas de cache
        st.markdown("#### üóÑÔ∏è Gerenciamento de Cache")
        
        col_cache1, col_cache2, col_cache3 = st.columns(3)
        
        with col_cache1:
            if st.button("üîÑ Invalidar Cache", use_container_width=True):
                self._invalidate_cache()
                show_toast("Cache invalidado!", "üîÑ")
        
        with col_cache2:
            if st.button("üìä Estat√≠sticas Cache", use_container_width=True):
                self._show_cache_stats()
        
        with col_cache3:
            if st.button("üßπ Limpar Tudo", use_container_width=True):
                self._clear_all_data()
    
    @st.dialog("Quick Add - Adi√ß√£o R√°pida")
    def _show_quick_add_dialog(self) -> None:
        """Modal dialog para adi√ß√£o r√°pida"""
        st.markdown("### ‚ö° Adi√ß√£o R√°pida de Equipamento")
        
        # Formul√°rio simplificado no modal
        equipamento = st.text_input("üñ•Ô∏è Nome do Equipamento")
        
        col_modal1, col_modal2 = st.columns(2)
        
        with col_modal1:
            categoria = st.selectbox("üìÇ Categoria", settings.CATEGORIAS)
            marca = st.text_input("üè¢ Marca")
        
        with col_modal2:
            quantidade = st.number_input("üìä Quantidade", min_value=1, value=1)
            valor = st.number_input("üí∞ Valor", min_value=1.0, value=100.0)
        
        fornecedor = st.text_input("üè™ Fornecedor")
        
        # Bot√µes do modal
        col_btn1, col_btn2 = st.columns(2)
        
        with col_btn1:
            if st.button("‚úÖ Adicionar R√°pido", use_container_width=True, type="primary"):
                if equipamento and marca and fornecedor:
                    # Processar adi√ß√£o r√°pida
                    self._processar_adicao_rapida(equipamento, categoria, marca, quantidade, valor, fornecedor)
                    st.success("‚úÖ Equipamento adicionado com sucesso!")
                    show_toast("‚ö° Adi√ß√£o r√°pida conclu√≠da!", "‚úÖ")
                    st.rerun()
                else:
                    st.error("‚ùå Preencha todos os campos obrigat√≥rios")
        
        with col_btn2:
            if st.button("‚ùå Cancelar", use_container_width=True):
                st.rerun()
    
    def _processar_busca_inteligente(self, codigo_input: str, equipamentos_cache: Dict) -> Optional[Dict]:
        """Processa busca inteligente com sugest√µes"""
        if not codigo_input or len(codigo_input) < 2:
            return None
        
        # Busca exata
        if codigo_input in equipamentos_cache:
            produto = equipamentos_cache[codigo_input]
            st.success(f"‚úÖ **Produto encontrado:** {produto['equipamento']}")
            
            # Mostrar informa√ß√µes do produto em cards
            col_info1, col_info2, col_info3 = st.columns(3)
            with col_info1:
                st.info(f"**üì¶ Equipamento:** {produto['equipamento']}")
                st.info(f"**üìÇ Categoria:** {produto['categoria']}")
            with col_info2:
                st.info(f"**üè¢ Marca:** {produto['marca']}")
                st.info(f"**üîß Modelo:** {produto['modelo']}")
            with col_info3:
                st.info(f"**üìä Estoque:** {produto['quantidade']} un.")
                st.info(f"**üí∞ Valor:** R$ {produto['valor_unitario']:,.2f}")
            
            render_status_badge(produto['status'])
            st.warning("‚¨ÜÔ∏è **Modo: Aumentar Estoque** - Adicionar√° ao estoque existente")
            return produto
        
        # Busca aproximada
        similares = [codigo for codigo in equipamentos_cache.keys() if codigo_input in codigo]
        if similares:
            st.info(f"üí° **C√≥digos similares encontrados:** {', '.join(similares[:5])}")
        else:
            st.warning(f"‚ùå C√≥digo n√£o encontrado. Criando novo produto: `{codigo_input}`")
        
        return None
    
    def _render_formulario_moderno(self, produto_existente: Optional[Dict], codigo_input: str) -> None:
        """Renderiza formul√°rio moderno com valida√ß√£o avan√ßada"""
        st.markdown("---")
        st.markdown("### üìù Formul√°rio de Adi√ß√£o Inteligente")
        
        is_produto_existente = produto_existente is not None
        
        # Formul√°rio com valida√ß√£o em tempo real
        with st.form("form_adicionar_moderno", clear_on_submit=not is_produto_existente):
            
            # Fragment para campos din√¢micos
            self._render_campos_formulario(produto_existente, codigo_input, is_produto_existente)
            
            # Valida√ß√£o e submit
            self._render_validacao_submit(is_produto_existente, produto_existente)
    
    @st.fragment
    def _render_campos_formulario(self, produto_existente: Optional[Dict], codigo_input: str, is_produto_existente: bool) -> None:
        """Fragment para campos de formul√°rio responsivos"""
        
        col_form1, col_form2 = st.columns(2)
        
        with col_form1:
            # Campos do lado esquerdo
            equipamento = st.text_input(
                "üñ•Ô∏è Nome do Equipamento *",
                value=produto_existente['equipamento'] if produto_existente else "",
                placeholder="Ex: Notebook Dell Latitude 5520",
                disabled=is_produto_existente,
                key="campo_equipamento"
            )
            
            categoria_index = 0
            if produto_existente and produto_existente['categoria'] in settings.CATEGORIAS:
                categoria_index = settings.CATEGORIAS.index(produto_existente['categoria'])
            
            categoria = st.selectbox(
                "üìÇ Categoria *",
                settings.CATEGORIAS,
                index=categoria_index,
                disabled=is_produto_existente,
                key="campo_categoria"
            )
            
            marca = st.text_input(
                "üè¢ Marca *",
                value=produto_existente['marca'] if produto_existente else "",
                placeholder="Ex: Dell",
                disabled=is_produto_existente,
                key="campo_marca"
            )
            
            modelo = st.text_input(
                "üîß Modelo *",
                value=produto_existente['modelo'] if produto_existente else "",
                placeholder="Ex: Latitude 5520",
                disabled=is_produto_existente,
                key="campo_modelo"
            )
        
        with col_form2:
            # Campos do lado direito
            codigo_produto = st.text_input(
                "üè∑Ô∏è C√≥digo do Produto *",
                value=codigo_input,
                placeholder="Ex: NB-DELL-001",
                disabled=is_produto_existente,
                key="campo_codigo"
            )
            
            quantidade = st.number_input(
                "üìä Quantidade a Adicionar *",
                min_value=1,
                max_value=settings.MAX_QUANTIDADE,
                value=1,
                key="campo_quantidade"
            )
            
            valor_default = produto_existente['valor_unitario'] if produto_existente else 100.00
            valor_unitario = st.number_input(
                "üí∞ Valor Unit√°rio (R$) *",
                min_value=settings.MIN_VALOR,
                value=float(valor_default),
                step=0.01,
                format="%.2f",
                key="campo_valor"
            )
            
            fornecedor = st.text_input(
                "üè™ Fornecedor *",
                value=produto_existente['fornecedor'] if produto_existente else "",
                placeholder="Ex: Dell Brasil",
                key="campo_fornecedor"
            )
        
        # C√°lculos em tempo real
        if quantidade > 0 and valor_unitario > 0:
            valor_total = quantidade * valor_unitario
            
            col_calc1, col_calc2 = st.columns(2)
            with col_calc1:
                st.markdown(f"### üí∞ **Valor Total: R$ {valor_total:,.2f}**")
            
            with col_calc2:
                if is_produto_existente:
                    nova_quantidade = produto_existente['quantidade'] + quantidade
                    st.markdown(f"### üìä **Novo Estoque: {nova_quantidade:,} un.**")
            
            # Alertas inteligentes
            if valor_total > 100000:
                st.warning("‚ö†Ô∏è **Valor alto!** Confirme antes de prosseguir.")
    
    def _render_validacao_submit(self, is_produto_existente: bool, produto_existente: Optional[Dict]) -> None:
        """Renderiza valida√ß√£o e bot√µes de submit"""
        
        # Bot√µes de a√ß√£o
        st.markdown("---")
        
        col_btn1, col_btn2, col_btn3, col_btn4 = st.columns([1, 1, 2, 1])
        
        with col_btn2:
            validar_clicked = st.form_submit_button(
                "üëÄ Validar",
                type="secondary",
                use_container_width=True
            )
        
        with col_btn3:
            if is_produto_existente:
                submit_clicked = st.form_submit_button(
                    f"üìà Aumentar Estoque",
                    type="primary",
                    use_container_width=True
                )
            else:
                submit_clicked = st.form_submit_button(
                    "‚úÖ Adicionar Equipamento",
                    type="primary",
                    use_container_width=True
                )
        
        # Processamento
        if validar_clicked or submit_clicked:
            self._processar_formulario_submit(submit_clicked, is_produto_existente, produto_existente)
    
    def _processar_formulario_submit(self, is_submit: bool, is_produto_existente: bool, produto_existente: Optional[Dict]) -> None:
        """Processa submiss√£o do formul√°rio"""
        
        # Coletar dados do formul√°rio
        equipamento = st.session_state.get('campo_equipamento', '')
        categoria = st.session_state.get('campo_categoria', '')
        marca = st.session_state.get('campo_marca', '')
        modelo = st.session_state.get('campo_modelo', '')
        codigo_produto = st.session_state.get('campo_codigo', '')
        quantidade = st.session_state.get('campo_quantidade', 1)
        valor_unitario = st.session_state.get('campo_valor', 100.0)
        fornecedor = st.session_state.get('campo_fornecedor', '')
        
        # Validar dados
        erros = self._validar_dados_moderno(
            equipamento, marca, modelo, codigo_produto,
            fornecedor, valor_unitario, quantidade, is_produto_existente
        )
        
        if erros:
            st.error("**‚ùå Erros encontrados:**")
            for erro in erros:
                st.error(f"‚Ä¢ {erro}")
            return
        
        if not is_submit:
            st.success("‚úÖ **Todos os dados est√£o corretos!**")
            return
        
        # Processar adi√ß√£o
        self._executar_adicao(
            equipamento, categoria, marca, modelo, codigo_produto,
            quantidade, valor_unitario, fornecedor, is_produto_existente, produto_existente
        )
    
    def _executar_adicao(self, equipamento: str, categoria: str, marca: str,
                        modelo: str, codigo_produto: str, quantidade: int,
                        valor_unitario: float, fornecedor: str,
                        is_produto_existente: bool, produto_existente: Optional[Dict]) -> None:
        """Executa a adi√ß√£o do equipamento"""
        try:
            if is_produto_existente and produto_existente:
                # Aumentar estoque
                response = self.estoque_service.aumentar_estoque(
                    produto_existente['id'], quantidade, valor_unitario, fornecedor
                )
                
                if response.success:
                    # Atualizar estat√≠sticas
                    st.session_state.adicionar_stats['total_added_today'] += quantidade
                    st.session_state.adicionar_stats['total_value_added_today'] += quantidade * valor_unitario
                    
                    show_success_message(
                        f"‚úÖ **Estoque aumentado com sucesso!**\n\n"
                        f"**üì¶ Equipamento:** {produto_existente['equipamento']}\n"
                        f"**üìä Quantidade:** +{quantidade} unidades\n"
                        f"**üí∞ Valor:** R$ {quantidade * valor_unitario:,.2f}"
                    )
                    
                    if st.session_state.adicionar_config['notification_enabled']:
                        show_toast("üìà Estoque atualizado!", "‚úÖ")
                    
                    # Invalidar caches
                    st.session_state['historico_cache_invalidated'] = True
                    self._invalidate_cache()
                    st.rerun()
                else:
                    show_error_message(f"‚ùå Erro: {response.message}")
            else:
                # Criar novo equipamento
                novo_equipamento = Equipamento(
                    equipamento=equipamento.strip(),
                    categoria=categoria,
                    marca=marca.strip(),
                    modelo=modelo.strip(),
                    codigo_produto=codigo_produto.strip().upper(),
                    quantidade=quantidade,
                    valor_unitario=valor_unitario,
                    fornecedor=fornecedor.strip()
                )
                
                response = self.estoque_service.adicionar_equipamento(novo_equipamento)
                
                if response.success:
                    # Atualizar estat√≠sticas
                    st.session_state.adicionar_stats['total_added_today'] += quantidade
                    st.session_state.adicionar_stats['total_value_added_today'] += quantidade * valor_unitario
                    
                    show_success_message(
                        f"üéâ **Novo equipamento cadastrado!**\n\n"
                        f"**üì¶ Equipamento:** {equipamento}\n"
                        f"**üè∑Ô∏è C√≥digo:** {codigo_produto}\n"
                        f"**üìä Quantidade:** {quantidade} unidades\n"
                        f"**üí∞ Valor Total:** R$ {quantidade * valor_unitario:,.2f}"
                    )
                    
                    if st.session_state.adicionar_config['notification_enabled']:
                        show_toast("üÜï Equipamento criado!", "üéâ")
                    
                    # Invalidar caches
                    st.session_state['historico_cache_invalidated'] = True
                    self._invalidate_cache()
                    st.rerun()
                else:
                    show_error_message(f"‚ùå Erro: {response.message}")
                    
        except Exception as e:
            logger.error(f"Erro na execu√ß√£o de adi√ß√£o: {str(e)}")
            show_error_message(f"‚ùå Erro interno: {str(e)}")
    
    def _validar_dados_moderno(self, equipamento: str, marca: str, modelo: str,
                              codigo_produto: str, fornecedor: str,
                              valor_unitario: float, quantidade: int,
                              is_produto_existente: bool) -> List[str]:
        """Valida√ß√£o moderna com regras configur√°veis - AJUSTADO PARA C√ìDIGOS DE EMPRESAS"""
        erros = []
        
        # Valida√ß√µes para novos produtos - REDUZIDO PARA 2 CARACTERES M√çNIMO
        if not is_produto_existente:
            if not equipamento or len(equipamento.strip()) < 2:
                erros.append("Nome do equipamento deve ter pelo menos 2 caracteres")
            
            if not marca or len(marca.strip()) < 2:
                erros.append("Marca deve ter pelo menos 2 caracteres")
            
            if not modelo or len(modelo.strip()) < 2:
                erros.append("Modelo deve ter pelo menos 2 caracteres")
            
            if not codigo_produto or len(codigo_produto.strip()) < 2:
                erros.append("C√≥digo deve ter pelo menos 2 caracteres (c√≥digos de empresas)")
        
        # Valida√ß√µes sempre necess√°rias - REDUZIDO PARA 2 CARACTERES M√çNIMO
        if not fornecedor or len(fornecedor.strip()) < 2:
            erros.append("Fornecedor deve ter pelo menos 2 caracteres")
        
        if valor_unitario <= 0:
            erros.append("Valor unit√°rio deve ser maior que zero")
        
        if quantidade <= 0:
            erros.append("Quantidade deve ser maior que zero")
        
        if quantidade > settings.MAX_QUANTIDADE:
            erros.append(f"Quantidade m√°xima: {settings.MAX_QUANTIDADE}")
        
        return erros
    
    # M√©todos auxiliares
    def _render_stats_realtime(self) -> None:
        """Renderiza estat√≠sticas em tempo real"""
        try:
            stats = self.estoque_service.obter_estatisticas()
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üì¶ Total Equipamentos", f"{stats.get('total_equipamentos', 0):,}")
            with col2:
                st.metric("üìÇ Categorias", stats.get('categorias_unicas', 0))
            with col3:
                st.metric("üí∞ Valor Total", f"R$ {stats.get('valor_total', 0):,.2f}")
            with col4:
                st.metric("‚úÖ Dispon√≠veis", f"{stats.get('disponiveis', 0):,}")
                
        except Exception as e:
            logger.error(f"Erro nas estat√≠sticas: {str(e)}")
    
    def _invalidate_cache(self) -> None:
        """Invalida cache TTL"""
        if hasattr(st, 'cache_data'):
            self._get_equipamentos_cache_ttl.clear()
    
    def _clear_form_state(self) -> None:
        """Limpa estado do formul√°rio"""
        keys_to_clear = [k for k in st.session_state.keys() if k.startswith('campo_') or k.startswith('codigo_search')]
        for key in keys_to_clear:
            del st.session_state[key]
    
    def _carregar_template_basico(self) -> None:
        """Carrega template b√°sico para lote"""
        st.session_state.df_lote_adicionar = pd.DataFrame({
            'equipamento': ['Notebook B√°sico', 'Mouse √ìptico', 'Teclado USB'],
            'categoria': ['Notebook', 'Perif√©ricos', 'Perif√©ricos'],
            'marca': ['Dell', 'Logitech', 'Logitech'],
            'modelo': ['Inspiron 15', 'M100', 'K120'],
            'codigo_produto': ['NB-DELL-002', 'MS-LOG-001', 'KB-LOG-001'],
            'quantidade': [5, 10, 8],
            'valor_unitario': [2500.0, 25.0, 45.0],
            'fornecedor': ['Dell Brasil', 'Logitech', 'Logitech'],
            'observacoes': ['', '', '']
        })
        show_toast("üìã Template b√°sico carregado!", "‚úÖ")
    
    def _carregar_template_notebooks(self) -> None:
        """Carrega template para notebooks"""
        st.session_state.df_lote_adicionar = pd.DataFrame({
            'equipamento': ['Notebook Dell Latitude', 'Notebook HP EliteBook', 'Notebook Lenovo ThinkPad'],
            'categoria': ['Notebook', 'Notebook', 'Notebook'],
            'marca': ['Dell', 'HP', 'Lenovo'],
            'modelo': ['Latitude 5520', 'EliteBook 840', 'ThinkPad E14'],
            'codigo_produto': ['NB-DELL-003', 'NB-HP-001', 'NB-LEN-001'],
            'quantidade': [3, 2, 4],
            'valor_unitario': [3500.0, 4200.0, 3800.0],
            'fornecedor': ['Dell Brasil', 'HP Brasil', 'Lenovo'],
            'observacoes': ['', '', '']
        })
        show_toast("üíª Template notebooks carregado!", "‚úÖ")
    
    def _carregar_template_perifericos(self) -> None:
        """Carrega template para perif√©ricos"""
        st.session_state.df_lote_adicionar = pd.DataFrame({
            'equipamento': ['Mouse Wireless', 'Teclado Mec√¢nico', 'Monitor 24"', 'Webcam HD'],
            'categoria': ['Perif√©ricos', 'Perif√©ricos', 'Monitor', 'Perif√©ricos'],
            'marca': ['Logitech', 'Corsair', 'LG', 'Logitech'],
            'modelo': ['MX Master 3', 'K70 RGB', '24MP59G', 'C920'],
            'codigo_produto': ['MS-LOG-002', 'KB-COR-001', 'MN-LG-001', 'WC-LOG-001'],
            'quantidade': [10, 5, 6, 8],
            'valor_unitario': [320.0, 450.0, 650.0, 280.0],
            'fornecedor': ['Logitech', 'Corsair', 'LG', 'Logitech'],
            'observacoes': ['', '', '', '']
        })
        show_toast("üñ®Ô∏è Template perif√©ricos carregado!", "‚úÖ")
    
    def _processar_validacao_lote(self, df_editado: pd.DataFrame) -> None:
        """Processa valida√ß√£o do lote"""
        # Filtrar linhas com dados
        df_valido = df_editado.dropna(subset=['equipamento']).copy()
        df_valido = df_valido[df_valido['equipamento'].str.strip() != '']
        
        if df_valido.empty:
            st.info("üí° Preencha pelo menos um equipamento para processar o lote")
            return
        
        # Valida√ß√µes do lote - AJUSTADO PARA 2 CARACTERES M√çNIMO (C√ìDIGOS DE EMPRESAS)
        erros_lote = []
        for idx, row in df_valido.iterrows():
            if len(str(row['equipamento']).strip()) < 2:
                erros_lote.append(f"Linha {idx+1}: Nome deve ter pelo menos 2 caracteres")
            if len(str(row['codigo_produto']).strip()) < 2:
                erros_lote.append(f"Linha {idx+1}: C√≥digo deve ter pelo menos 2 caracteres")
            if row['quantidade'] <= 0:
                erros_lote.append(f"Linha {idx+1}: Quantidade inv√°lida")
            if row['valor_unitario'] <= 0:
                erros_lote.append(f"Linha {idx+1}: Valor inv√°lido")
        
        # Mostrar resultado da valida√ß√£o
        if erros_lote:
            st.error("**‚ùå Erros no lote:**")
            for erro in erros_lote:
                st.error(f"‚Ä¢ {erro}")
        else:
            # Mostrar resumo e permitir processamento
            total_itens = len(df_valido)
            total_unidades = df_valido['quantidade'].sum()
            valor_total = (df_valido['quantidade'] * df_valido['valor_unitario']).sum()
            
            st.success("‚úÖ **Lote v√°lido!**")
            
            col_resumo1, col_resumo2, col_resumo3 = st.columns(3)
            with col_resumo1:
                st.metric("üì¶ Equipamentos", total_itens)
            with col_resumo2:
                st.metric("üìä Total Unidades", f"{total_unidades:,}")
            with col_resumo3:
                st.metric("üí∞ Valor Total", f"R$ {valor_total:,.2f}")
            
            # Bot√£o para processar lote
            if st.button(
                f"üöÄ Processar Lote ({total_itens} equipamentos)",
                type="primary",
                use_container_width=True
            ):
                self._executar_lote(df_valido)
    
    def _executar_lote(self, df_valido: pd.DataFrame) -> None:
        """Executa adi√ß√£o em lote"""
        sucessos = 0
        erros = 0
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for idx, row in df_valido.iterrows():
            try:
                # Atualizar progresso
                progresso = (idx + 1) / len(df_valido)
                progress_bar.progress(progresso)
                status_text.text(f"Processando {idx + 1}/{len(df_valido)}: {row['equipamento']}")
                
                # Criar equipamento
                equipamento = Equipamento(
                    equipamento=str(row['equipamento']).strip(),
                    categoria=str(row['categoria']).strip(),
                    marca=str(row['marca']).strip(),
                    modelo=str(row['modelo']).strip(),
                    codigo_produto=str(row['codigo_produto']).strip().upper(),
                    quantidade=int(row['quantidade']),
                    valor_unitario=float(row['valor_unitario']),
                    fornecedor=str(row['fornecedor']).strip()
                )
                
                # Adicionar equipamento
                response = self.estoque_service.adicionar_equipamento(equipamento)
                
                if response.success:
                    sucessos += 1
                else:
                    erros += 1
                    logger.error(f"Erro no lote linha {idx+1}: {response.message}")
                
            except Exception as e:
                erros += 1
                logger.error(f"Erro no lote linha {idx+1}: {str(e)}")
        
        # Finalizar
        progress_bar.progress(1.0)
        status_text.text("Processamento conclu√≠do!")
        
        if sucessos == len(df_valido):
            show_success_message(f"üéâ **Lote processado com sucesso!** {sucessos} equipamentos adicionados.")
        else:
            show_warning_message(f"‚ö†Ô∏è **Lote parcial:** {sucessos} sucessos, {erros} erros")
        
        # Invalidar caches
        st.session_state['historico_cache_invalidated'] = True
        self._invalidate_cache()
        
        # Limpar formul√°rio de lote
        st.session_state.df_lote_adicionar = pd.DataFrame({
            'equipamento': [''] * 5,
            'categoria': [''] * 5,
            'marca': [''] * 5,
            'modelo': [''] * 5,
            'codigo_produto': [''] * 5,
            'quantidade': [1] * 5,
            'valor_unitario': [100.0] * 5,
            'fornecedor': [''] * 5,
            'observacoes': [''] * 5
        })
        
        show_toast(f"üì¶ Lote conclu√≠do: {sucessos} itens!", "üéâ")
        st.rerun()
    
    def _processar_adicao_rapida(self, equipamento: str, categoria: str, marca: str,
                                quantidade: int, valor: float, fornecedor: str) -> None:
        """Processa adi√ß√£o r√°pida via modal"""
        try:
            # Gerar c√≥digo autom√°tico
            codigo = self.estoque_service.gerar_codigo_sugerido(categoria, marca)
            
            novo_equipamento = Equipamento(
                equipamento=equipamento,
                categoria=categoria,
                marca=marca,
                modelo="N/A",
                codigo_produto=codigo,
                quantidade=quantidade,
                valor_unitario=valor,
                fornecedor=fornecedor
            )
            
            response = self.estoque_service.adicionar_equipamento(novo_equipamento)
            
            if response.success:
                # Atualizar estat√≠sticas
                st.session_state.adicionar_stats['total_added_today'] += quantidade
                st.session_state.adicionar_stats['total_value_added_today'] += quantidade * valor
                
                # Invalidar caches
                st.session_state['historico_cache_invalidated'] = True
                self._invalidate_cache()
                
        except Exception as e:
            logger.error(f"Erro na adi√ß√£o r√°pida: {str(e)}")
    
    def _render_historico_mock(self) -> None:
        """Renderiza hist√≥rico simulado"""
        st.info("üìä **Hist√≥rico em desenvolvimento** - Ser√° integrado com o banco de movimenta√ß√µes")
        
        # Dados simulados
        df_hist = pd.DataFrame({
            'Data': ['2024-01-21', '2024-01-21', '2024-01-20'],
            'Equipamento': ['Notebook Dell', 'Mouse Logitech', 'Teclado Corsair'],
            'C√≥digo': ['NB-DELL-001', 'MS-LOG-001', 'KB-COR-001'],
            'Quantidade': [2, 5, 3],
            'Valor': [7000.0, 125.0, 1350.0],
            'Fornecedor': ['Dell Brasil', 'Logitech', 'Corsair']
        })
        
        st.dataframe(df_hist, use_container_width=True)
    
    def _render_graficos_analytics(self) -> None:
        """Renderiza gr√°ficos de analytics simulados"""
        st.info("üìà **Gr√°ficos em desenvolvimento** - Analytics avan√ßados em breve")
    
    def _exportar_historico(self) -> None:
        """Exporta hist√≥rico"""
        show_toast("üì• Exporta√ß√£o em desenvolvimento!", "üöß")
    
    def _show_cache_stats(self) -> None:
        """Mostra estat√≠sticas do cache"""
        show_toast("üìä Stats: Cache ativo com TTL 5min", "üìà")
    
    def _clear_all_data(self) -> None:
        """Limpa todos os dados"""
        self._invalidate_cache()
        self._clear_form_state()
        show_toast("üßπ Dados limpos!", "‚úÖ")


def render_adicionar_page(estoque_service: EstoqueService) -> None:
    """Fun√ß√£o para renderizar a p√°gina modernizada"""
    page = AdicionarEquipamentoProfessional(estoque_service)
    page.render() 