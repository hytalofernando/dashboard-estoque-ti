"""
P√°gina de configura√ß√µes da aplica√ß√£o
"""

import streamlit as st
from typing import Dict, Any
from loguru import logger

from config.settings import settings
from utils.ui_utils import (
    create_form_section, show_success_message, show_info_message,
    create_action_buttons
)

class ConfiguracoesPage:
    """P√°gina de configura√ß√µes da aplica√ß√£o"""
    
    def __init__(self):
        pass
    
    def render(self) -> None:
        """Renderiza a p√°gina de configura√ß√µes"""
        try:
            # Header da p√°gina
            st.markdown("# ‚öôÔ∏è Configura√ß√µes da Aplica√ß√£o")
            st.markdown("Configure as funcionalidades e p√°ginas da aplica√ß√£o conforme suas necessidades.")
            st.markdown("---")
            
            # Se√ß√£o de configura√ß√£o de p√°ginas
            self._render_page_config()
            
            # Se√ß√£o de configura√ß√µes gerais
            self._render_general_config()
            
            # Se√ß√£o de informa√ß√µes do sistema
            self._render_system_info()
            
        except Exception as e:
            logger.error(f"Erro ao renderizar p√°gina de configura√ß√µes: {str(e)}")
            st.error("Erro ao carregar configura√ß√µes.")
    
    def _render_page_config(self) -> None:
        """Renderiza configura√ß√µes de p√°ginas"""
        create_form_section(
            "üì± Gerenciamento de P√°ginas",
            "Ative ou desative p√°ginas conforme necess√°rio para sua organiza√ß√£o"
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üîß Configurar P√°ginas Ativas")
            
            changes_made = False
            original_states = {}
            
            for key, info in settings.PAGINAS_ATIVAS.items():
                original_states[key] = info["ativa"]
                
                new_state = st.checkbox(
                    f"{info['titulo']}",
                    value=info["ativa"],
                    key=f"config_page_{key}",
                    help=info["descricao"]
                )
                
                if new_state != info["ativa"]:
                    settings.PAGINAS_ATIVAS[key]["ativa"] = new_state
                    changes_made = True
            
            if changes_made:
                show_success_message("Configura√ß√µes de p√°ginas atualizadas!")
                logger.info("Configura√ß√µes de p√°ginas modificadas pelo usu√°rio")
        
        with col2:
            st.markdown("### üìä Status das P√°ginas")
            
            total_paginas = len(settings.PAGINAS_ATIVAS)
            ativas = len([p for p in settings.PAGINAS_ATIVAS.values() if p["ativa"]])
            inativas = total_paginas - ativas
            
            st.metric("Total de P√°ginas", total_paginas)
            st.metric("P√°ginas Ativas", ativas, delta=None)
            st.metric("P√°ginas Inativas", inativas)
            
            # Progresso visual
            progress = ativas / total_paginas if total_paginas > 0 else 0
            st.progress(progress, text=f"Utiliza√ß√£o: {progress:.1%}")
            
            # Lista de p√°ginas ativas
            st.markdown("**üìã P√°ginas Ativas:**")
            for key, info in settings.PAGINAS_ATIVAS.items():
                if info["ativa"]:
                    st.markdown(f"‚úÖ {info['titulo']}")
                else:
                    st.markdown(f"‚ùå {info['titulo']}")
    
    def _render_general_config(self) -> None:
        """Renderiza configura√ß√µes gerais"""
        st.markdown("---")
        create_form_section(
            "üîß Configura√ß√µes Gerais",
            "Ajustes gerais da aplica√ß√£o"
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìÅ Configura√ß√µes de Arquivo")
            st.text_input("Nome do arquivo Excel", value=settings.EXCEL_FILE, disabled=True)
            st.text_input("Planilha de Estoque", value=settings.SHEET_ESTOQUE, disabled=True)
            st.text_input("Planilha de Movimenta√ß√µes", value=settings.SHEET_MOVIMENTACOES, disabled=True)
            
            st.markdown("### üé® Configura√ß√µes Visuais")
            st.text_input("T√≠tulo da P√°gina", value=settings.PAGE_TITLE, disabled=True)
            st.text_input("√çcone da P√°gina", value=settings.PAGE_ICON, disabled=True)
        
        with col2:
            st.markdown("### üìä Limites de Valida√ß√£o")
            st.number_input("Quantidade M√°xima", value=settings.MAX_QUANTIDADE, disabled=True)
            st.number_input("Valor M√≠nimo", value=settings.MIN_VALOR, disabled=True)
            st.number_input("M√°x. Caracteres Observa√ß√µes", value=settings.MAX_OBSERVACOES, disabled=True)
            
            st.markdown("### üè∑Ô∏è Categorias Dispon√≠veis")
            for categoria in settings.CATEGORIAS:
                st.markdown(f"‚Ä¢ {categoria}")
    
    def _render_system_info(self) -> None:
        """Renderiza informa√ß√µes do sistema"""
        st.markdown("---")
        create_form_section(
            "‚ÑπÔ∏è Informa√ß√µes do Sistema",
            "Detalhes t√©cnicos e status da aplica√ß√£o"
        )
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("### üöÄ Vers√£o")
            st.markdown("**Dashboard Estoque TI**")
            st.markdown("Vers√£o: 2.0.0 Moderna")
            st.markdown("Status: ‚úÖ Ativo")
        
        with col2:
            st.markdown("### üíª Tecnologias")
            st.markdown("‚Ä¢ Streamlit 1.42+")
            st.markdown("‚Ä¢ Plotly 5.21+")
            st.markdown("‚Ä¢ Pandas 2.2+")
            st.markdown("‚Ä¢ Pydantic 2.5+")
            st.markdown("‚Ä¢ Loguru 0.7+")
        
        with col3:
            st.markdown("### üéØ Recursos")
            st.markdown("‚Ä¢ Interface responsiva")
            st.markdown("‚Ä¢ Notifica√ß√µes toast")
            st.markdown("‚Ä¢ Gr√°ficos modernos")
            st.markdown("‚Ä¢ Valida√ß√£o de dados")
            st.markdown("‚Ä¢ Logs estruturados")
        
        # A√ß√µes r√°pidas
        st.markdown("---")
        st.markdown("### üîß A√ß√µes R√°pidas")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üîÑ Recarregar Configura√ß√µes", type="secondary"):
                st.rerun()
        
        with col2:
            if st.button("‚úÖ Ativar Todas as P√°ginas", type="secondary"):
                for key in settings.PAGINAS_ATIVAS:
                    settings.PAGINAS_ATIVAS[key]["ativa"] = True
                show_success_message("Todas as p√°ginas foram ativadas!")
                st.rerun()
        
        with col3:
            if st.button("‚ùå Desativar P√°ginas Opcionais", type="secondary"):
                # Manter apenas Dashboard ativo
                for key in settings.PAGINAS_ATIVAS:
                    if key != "dashboard":
                        settings.PAGINAS_ATIVAS[key]["ativa"] = False
                show_info_message("P√°ginas opcionais desativadas. Apenas Dashboard ativo.")
                st.rerun()
        
        with col4:
            if st.button("üîÑ Resetar Configura√ß√µes", type="secondary"):
                for key in settings.PAGINAS_ATIVAS:
                    settings.PAGINAS_ATIVAS[key]["ativa"] = True
                show_success_message("Configura√ß√µes resetadas para padr√£o!")
                st.rerun()

def render_configuracoes_page() -> None:
    """Fun√ß√£o para renderizar a p√°gina de configura√ß√µes"""
    page = ConfiguracoesPage()
    page.render() 