"""
Servi√ßo de Autentica√ß√£o - Dashboard Estoque TI
Sistema seguro com Admin e Visualizador - Vers√£o Aprimorada com bcrypt
"""

import streamlit as st
import os
from typing import Dict, Optional, List
from dataclasses import dataclass
from loguru import logger
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

from utils.security_utils import PasswordManager, RateLimiter

@dataclass
class User:
    """Modelo de usu√°rio aprimorado"""
    username: str
    profile: str
    display_name: str
    permissions: List[str]
    last_login: Optional[datetime] = None
    login_attempts: int = 0

class AuthService:
    """Servi√ßo de autentica√ß√£o seguro com perfis Admin e Visualizador"""
    
    def __init__(self):
        # Inicializar componentes de seguran√ßa
        self.rate_limiter = RateLimiter(max_requests=5, window_minutes=15)  # 5 tentativas por 15 min
        self.password_manager = PasswordManager()
        
        # ‚úÖ SENHAS SEGURAS COM VARI√ÅVEIS DE AMBIENTE
        admin_password = os.getenv('ADMIN_PASSWORD', 'admin123_CHANGE_ME')
        viewer_password = os.getenv('VIEWER_PASSWORD', 'view123_CHANGE_ME')
        
        # ‚ö†Ô∏è AVISO DE SEGURAN√áA
        if admin_password == 'admin123_CHANGE_ME' or viewer_password == 'view123_CHANGE_ME':
            logger.warning("üîí ATEN√á√ÉO: Usando senhas padr√£o! Configure as vari√°veis de ambiente.")
        
        # ‚úÖ USU√ÅRIOS COM HASHES SEGUROS
        self.users_db = {
            "admin": {
                "password_hash": self._get_or_create_password_hash("admin", admin_password),
                "profile": "administrador",
                "display_name": "Administrador",
                "permissions": [
                    "dashboard", "adicionar", "remover", "historico", 
                    "codigos", "configuracoes", "can_edit"
                ],
                "login_attempts": 0,
                "last_login": None,
                "created_at": datetime.now()
            },
            "visualizador": {
                "password_hash": self._get_or_create_password_hash("visualizador", viewer_password),
                "profile": "visualizador", 
                "display_name": "Visualizador",
                "permissions": [
                    "dashboard", "historico", "codigos", "configuracoes"
                    # ‚ùå N√ÉO tem "adicionar", "remover", "can_edit"
                ],
                "login_attempts": 0,
                "last_login": None,
                "created_at": datetime.now()
            }
        }
        
        logger.info("üîê AuthService inicializado com seguran√ßa aprimorada")
    
    def _get_or_create_password_hash(self, username: str, password: str) -> str:
        """
        Obt√©m ou cria hash da senha de forma segura
        
        Args:
            username: Nome do usu√°rio
            password: Senha em texto plano
            
        Returns:
            Hash seguro da senha
        """
        # Verifica se j√° existe hash no session_state (cache)
        cache_key = f"password_hash_{username}"
        
        if cache_key in st.session_state:
            return st.session_state[cache_key]
        
        # Gera novo hash
        password_hash = self.password_manager.hash_password(password)
        
        # Salva no cache da sess√£o
        st.session_state[cache_key] = password_hash
        
        logger.info(f"üîê Hash de senha gerado para usu√°rio: {username}")
        return password_hash
    
    def authenticate(self, username: str, password: str) -> Optional[User]:
        """
        Autentica usu√°rio com valida√ß√µes de seguran√ßa
        
        Args:
            username: Nome do usu√°rio
            password: Senha
            
        Returns:
            Objeto User se autenticado, None caso contr√°rio
        """
        try:
            # Sanitizar entrada
            username = username.lower().strip() if username else ""
            
            # ‚úÖ VERIFICAR RATE LIMITING
            client_ip = self._get_client_identifier()
            if not self.rate_limiter.is_allowed(f"login_{client_ip}"):
                logger.warning(f"üö® Rate limit excedido para IP: {client_ip}")
                return None
            
            # Verificar se usu√°rio existe
            if username not in self.users_db:
                logger.warning(f"üö® Tentativa de login com usu√°rio inexistente: {username}")
                self._log_failed_attempt(username, "user_not_found")
                return None
            
            user_data = self.users_db[username]
            
            # ‚úÖ VERIFICAR TENTATIVAS DE LOGIN
            if user_data.get("login_attempts", 0) >= 5:
                logger.warning(f"üö® Usu√°rio bloqueado por muitas tentativas: {username}")
                return None
            
            # ‚úÖ VERIFICAR SENHA COM BCRYPT
            if self.password_manager.verify_password(password, user_data["password_hash"]):
                # ‚úÖ LOGIN BEM-SUCEDIDO
                logger.info(f"‚úÖ Login bem-sucedido: {username} ({user_data['profile']})")
                
                # Resetar tentativas e atualizar √∫ltimo login
                self.users_db[username]["login_attempts"] = 0
                self.users_db[username]["last_login"] = datetime.now()
                
                # Criar objeto User
                user = User(
                    username=username,
                    profile=user_data["profile"],
                    display_name=user_data["display_name"],
                    permissions=user_data["permissions"],
                    last_login=user_data["last_login"]
                )
                
                # Log de auditoria
                self._log_successful_login(user)
                
                return user
            else:
                # ‚ùå SENHA INCORRETA
                logger.warning(f"üö® Senha incorreta para usu√°rio: {username}")
                self._log_failed_attempt(username, "wrong_password")
                
                # Incrementar tentativas
                self.users_db[username]["login_attempts"] += 1
                
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro na autentica√ß√£o: {str(e)}")
            return None
    
    def _get_client_identifier(self) -> str:
        """
        Obt√©m identificador √∫nico do cliente para rate limiting
        
        Returns:
            Identificador do cliente
        """
        # Em produ√ß√£o, usar IP real do cliente
        # Por enquanto, usar session_id do Streamlit
        try:
            # Tentar obter session_id
            if hasattr(st, 'session_state') and hasattr(st.session_state, 'session_id'):
                return f"session_{st.session_state.session_id}"
            else:
                # Fallback para identificador baseado em timestamp
                if 'client_identifier' not in st.session_state:
                    st.session_state.client_identifier = f"client_{datetime.now().timestamp()}"
                return st.session_state.client_identifier
        except:
            return "unknown_client"
    
    def _log_failed_attempt(self, username: str, reason: str) -> None:
        """
        Registra tentativa de login falhada
        
        Args:
            username: Nome do usu√°rio
            reason: Motivo da falha
        """
        logger.warning(f"üö® Login falhado - Usu√°rio: {username}, Motivo: {reason}, IP: {self._get_client_identifier()}")
    
    def _log_successful_login(self, user: User) -> None:
        """
        Registra login bem-sucedido para auditoria
        
        Args:
            user: Objeto do usu√°rio
        """
        logger.info(f"‚úÖ Auditoria - Login: {user.username} ({user.profile}), IP: {self._get_client_identifier()}, Timestamp: {datetime.now()}")
    
    def is_authenticated(self) -> bool:
        """Verifica se usu√°rio est√° autenticado"""
        return 'authenticated_user' in st.session_state and st.session_state.authenticated_user is not None
    
    def get_current_user(self) -> Optional[User]:
        """Retorna usu√°rio atual ou None"""
        if self.is_authenticated():
            return st.session_state.authenticated_user
        return None
    
    def has_permission(self, permission: str) -> bool:
        """
        Verifica se usu√°rio atual tem permiss√£o espec√≠fica
        
        Args:
            permission: Permiss√£o a verificar
            
        Returns:
            True se tem permiss√£o
        """
        user = self.get_current_user()
        if not user:
            return False
        return permission in user.permissions
    
    def can_edit(self) -> bool:
        """Verifica se usu√°rio pode editar (adicionar/remover)"""
        return self.has_permission("can_edit")
    
    def logout(self) -> None:
        """Realiza logout do usu√°rio"""
        user = self.get_current_user()
        if user:
            logger.info(f"üö™ Logout: {user.username}")
        
        # Limpar dados da sess√£o
        keys_to_clear = [
            'authenticated_user', 
            'login_timestamp',
            'session_token'
        ]
        
        for key in keys_to_clear:
            if key in st.session_state:
                del st.session_state[key]
    
    def get_login_attempts(self, username: str) -> int:
        """
        Retorna n√∫mero de tentativas de login falhadas
        
        Args:
            username: Nome do usu√°rio
            
        Returns:
            N√∫mero de tentativas
        """
        if username in self.users_db:
            return self.users_db[username].get("login_attempts", 0)
        return 0
    
    def reset_login_attempts(self, username: str) -> bool:
        """
        Reseta tentativas de login (fun√ß√£o administrativa)
        
        Args:
            username: Nome do usu√°rio
            
        Returns:
            True se resetado com sucesso
        """
        if username in self.users_db:
            self.users_db[username]["login_attempts"] = 0
            logger.info(f"üîÑ Tentativas de login resetadas para: {username}")
            return True
        return False
    
    def get_user_info(self, username: str) -> Optional[Dict]:
        """
        Retorna informa√ß√µes do usu√°rio (sem dados sens√≠veis)
        
        Args:
            username: Nome do usu√°rio
            
        Returns:
            Dicion√°rio com informa√ß√µes do usu√°rio
        """
        if username in self.users_db:
            user_data = self.users_db[username].copy()
            # Remove dados sens√≠veis
            user_data.pop("password_hash", None)
            return user_data
        return None
    
    def get_filtered_pages(self) -> Dict:
        """
        Retorna p√°ginas filtradas baseadas nas permiss√µes do usu√°rio atual
        
        Returns:
            Dicion√°rio com p√°ginas que o usu√°rio pode acessar
        """
        from config.settings import settings
        
        user = self.get_current_user()
        if not user:
            # Se n√£o estiver autenticado, retorna apenas dashboard
            return {
                "dashboard": settings.PAGINAS_ATIVAS["dashboard"]
            }
        
        # Filtrar p√°ginas baseado nas permiss√µes do usu√°rio
        paginas_filtradas = {}
        
        for page_key, page_info in settings.PAGINAS_ATIVAS.items():
            # Verificar se a p√°gina est√° ativa nas configura√ß√µes
            if not page_info.get("ativa", False):
                continue
                
            # Verificar permiss√µes espec√≠ficas
            if page_key == "dashboard" and self.has_permission("dashboard"):
                paginas_filtradas[page_key] = page_info
            elif page_key == "adicionar" and self.has_permission("adicionar"):
                paginas_filtradas[page_key] = page_info
            elif page_key == "remover" and self.has_permission("remover"):
                paginas_filtradas[page_key] = page_info
            elif page_key == "historico" and self.has_permission("historico"):
                paginas_filtradas[page_key] = page_info
            elif page_key == "codigos" and self.has_permission("codigos"):
                paginas_filtradas[page_key] = page_info
            elif page_key == "configuracoes" and self.has_permission("configuracoes"):
                paginas_filtradas[page_key] = page_info
        
        return paginas_filtradas

# Inst√¢ncia global do servi√ßo de autentica√ß√£o
auth_service = AuthService()